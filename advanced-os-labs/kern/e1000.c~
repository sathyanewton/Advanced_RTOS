#include <kern/pci.h>
#include <kern/e1000.h>
#include <kern/pmap.h>
#include <inc/string.h>


// LAB 6: Your driver code here

//store MMIO base 0
volatile uint32_t *nic_mmio_base0;

// base of Tx Descriptor array must be 16B aligned
// (page aligned satisfies this)
volatile physaddr_t tx_desc_base_pa; //TODO Check if needs to be volaite

// tr desc array
volatile struct tx_desc *ptr_tx_desc_base_va;
// stores VA of buffers
volatile struct tx_buff *buffers [NUMBER_OF_TX_DESC];

//attach function for PCI init call
volatile uint32_t *lapic;
int nic_init(struct pci_func *pcif)
{
	// enable the dev
	// negotiate the MMIO BAR 0 (i.e. reg_base[0], reg_size[0])
	pci_func_enable (pcif);

	//map the MMIO region
	nic_mmio_base0 = (uint32_t*) mmio_map_region (pcif->reg_base[0], pcif->reg_size[0]);
	//panic ("nic_init(): Status of NIC %x ", *(nic_mmio_base0+2));

	//Tx Initialization See intel manual 14.5

	alloc_desc_buff();
	init_tx();

	return 0;
}

// send a physical page.
// caller function MUST check permissions on physical page
//drops a packet if hardware buffer is full
// returns
// 0 if successful
// -E_BUF_FULL if hardware buffer is empty
int try_transmit(struct PageInfo *pp_user, size_t len)
{
	if(len > BUFF_SIZE)
		panic("try_transmit(): len> BUF_SIZE - the system call made a mistake?");

	// tail is an index into ring
	int tail = *( nic_mmio_base0 + E1000_TDT/4 );
	volatile struct tx_desc *ptr_tx_desc_tail = ptr_tx_desc_base_va + tail;

	//tail should point to the next free element. Does it?
	if ( 0 == (ptr_tx_desc_tail->status & E1000_TXD_STAT_DD))
	{
		
		//Hardware didnt set DD bit, means not transmitted yet
		return -E_BUF_FULL ; //drop packet
	}

	//desc pointed by tail is free
	//copy over buffer
	memcpy ( (void * ) buffers[tail] , page2kva(pp_user), len );

	ptr_tx_desc_tail->addr =  PADDR ((void *)buffers[tail]);

	// ask the card to set DD once it transmits, set 3rd bit in cmd
	ptr_tx_desc_tail->cmd = 0x9; //TODO is this right?
	ptr_tx_desc_tail->status &= ~E1000_TXD_STAT_DD; //reset the DD bit
	ptr_tx_desc_tail->length = len;
	ptr_tx_desc_tail->cso = 0; //for compatibility

	*( nic_mmio_base0 + E1000_TDT/4 ) = (tail+1) % NUMBER_OF_TX_DESC;

	return 0;
}
// allocate space for descriptors and buffers
static void
alloc_desc_buff()
{
	int i;

	struct PageInfo *pp = 	page_alloc (ALLOC_ZERO);
	if ( NULL == pp )
		panic ("alloc_desc_buff(): page_alloc says no physical pages!");
	pp->pp_ref++; //increment page ref count
	tx_desc_base_pa = page2pa (pp);
	ptr_tx_desc_base_va = KADDR (tx_desc_base_pa); //holds base VA of desc
	
	// set the DD bit to 1 as now all desc are free
	for (i=0; i<NUMBER_OF_TX_DESC; i++)
	{
		(ptr_tx_desc_base_va+i)->status = E1000_TXD_STAT_DD;
	}


	//allocate space for buffer
	for (i=0; i<NUMBER_OF_TX_DESC; i++)
	{
		if ( NULL == (pp = 	page_alloc (!ALLOC_ZERO)) ) // TODO might be source of error
			panic ("alloc_desc_buff(): page_alloc says no physical pages!");
		pp->pp_ref++; //increment page ref count
		buffers[i] = page2kva (pp);	
	}
}
static void
	init_tx()
{
	// set the TDBAL register,
		// and set TDBAH as zero as we use only 32 bits
		*( nic_mmio_base0 + E1000_TDBAL/4) = tx_desc_base_pa;
		*( nic_mmio_base0 + E1000_TDBAH/4) = 0;

		//set length of Tx Ring
		// must be 128B aligned
		*( nic_mmio_base0 + E1000_TDLEN/4) = LENGTH_OF_TX_RING;

		//write 0 to tx desc head and tx desc tail registers
		*( nic_mmio_base0 + E1000_TDH/4 ) = 0;
		*( nic_mmio_base0 + E1000_TDT/4 ) = 0;

		*( nic_mmio_base0 + E1000_TCTL/4 ) = E1000_TCTL_EN | E1000_TCTL_PSP;
		*( nic_mmio_base0 + E1000_TCTL/4 ) |= 0xf << 4; //CT bits
		*( nic_mmio_base0 + E1000_TCTL/4 ) |=  (0x40 << 12); //E1000_TCTL_COLD

		// page 313 TIPG register
		*( nic_mmio_base0 + E1000_TIPG/4 ) = 10 /*IPGT */
				| ( 8 <<10) /*IPGR1 is significant only in half-duplex mode of operation.*/
				| (6 <<20) /*IPGR2 is significant only in half-duplex mode of operation.*/;
}
